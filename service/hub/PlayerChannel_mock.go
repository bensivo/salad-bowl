// Code generated by mockery v2.30.1. DO NOT EDIT.

package hub

import mock "github.com/stretchr/testify/mock"

// MockPlayerChannel is an autogenerated mock type for the PlayerChannel type
type MockPlayerChannel struct {
	mock.Mock
}

type MockPlayerChannel_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPlayerChannel) EXPECT() *MockPlayerChannel_Expecter {
	return &MockPlayerChannel_Expecter{mock: &_m.Mock}
}

// OnDisconnect provides a mock function with given fields: cb
func (_m *MockPlayerChannel) OnDisconnect(cb DisconnectCallback) {
	_m.Called(cb)
}

// MockPlayerChannel_OnDisconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnDisconnect'
type MockPlayerChannel_OnDisconnect_Call struct {
	*mock.Call
}

// OnDisconnect is a helper method to define mock.On call
//   - cb DisconnectCallback
func (_e *MockPlayerChannel_Expecter) OnDisconnect(cb interface{}) *MockPlayerChannel_OnDisconnect_Call {
	return &MockPlayerChannel_OnDisconnect_Call{Call: _e.mock.On("OnDisconnect", cb)}
}

func (_c *MockPlayerChannel_OnDisconnect_Call) Run(run func(cb DisconnectCallback)) *MockPlayerChannel_OnDisconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(DisconnectCallback))
	})
	return _c
}

func (_c *MockPlayerChannel_OnDisconnect_Call) Return() *MockPlayerChannel_OnDisconnect_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPlayerChannel_OnDisconnect_Call) RunAndReturn(run func(DisconnectCallback)) *MockPlayerChannel_OnDisconnect_Call {
	_c.Call.Return(run)
	return _c
}

// OnMessage provides a mock function with given fields: cb
func (_m *MockPlayerChannel) OnMessage(cb MessageCallback) {
	_m.Called(cb)
}

// MockPlayerChannel_OnMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnMessage'
type MockPlayerChannel_OnMessage_Call struct {
	*mock.Call
}

// OnMessage is a helper method to define mock.On call
//   - cb MessageCallback
func (_e *MockPlayerChannel_Expecter) OnMessage(cb interface{}) *MockPlayerChannel_OnMessage_Call {
	return &MockPlayerChannel_OnMessage_Call{Call: _e.mock.On("OnMessage", cb)}
}

func (_c *MockPlayerChannel_OnMessage_Call) Run(run func(cb MessageCallback)) *MockPlayerChannel_OnMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(MessageCallback))
	})
	return _c
}

func (_c *MockPlayerChannel_OnMessage_Call) Return() *MockPlayerChannel_OnMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPlayerChannel_OnMessage_Call) RunAndReturn(run func(MessageCallback)) *MockPlayerChannel_OnMessage_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: message
func (_m *MockPlayerChannel) Send(message interface{}) error {
	ret := _m.Called(message)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPlayerChannel_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockPlayerChannel_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - message interface{}
func (_e *MockPlayerChannel_Expecter) Send(message interface{}) *MockPlayerChannel_Send_Call {
	return &MockPlayerChannel_Send_Call{Call: _e.mock.On("Send", message)}
}

func (_c *MockPlayerChannel_Send_Call) Run(run func(message interface{})) *MockPlayerChannel_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockPlayerChannel_Send_Call) Return(_a0 error) *MockPlayerChannel_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPlayerChannel_Send_Call) RunAndReturn(run func(interface{}) error) *MockPlayerChannel_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPlayerChannel creates a new instance of MockPlayerChannel. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPlayerChannel(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPlayerChannel {
	mock := &MockPlayerChannel{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
