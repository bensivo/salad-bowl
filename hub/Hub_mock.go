// Code generated by mockery v2.30.1. DO NOT EDIT.

package hub

import mock "github.com/stretchr/testify/mock"

// MockHub is an autogenerated mock type for the Hub type
type MockHub struct {
	mock.Mock
}

type MockHub_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHub) EXPECT() *MockHub_Expecter {
	return &MockHub_Expecter{mock: &_m.Mock}
}

// Broadcast provides a mock function with given fields: message
func (_m *MockHub) Broadcast(message Message) error {
	ret := _m.Called(message)

	var r0 error
	if rf, ok := ret.Get(0).(func(Message) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHub_Broadcast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Broadcast'
type MockHub_Broadcast_Call struct {
	*mock.Call
}

// Broadcast is a helper method to define mock.On call
//   - message Message
func (_e *MockHub_Expecter) Broadcast(message interface{}) *MockHub_Broadcast_Call {
	return &MockHub_Broadcast_Call{Call: _e.mock.On("Broadcast", message)}
}

func (_c *MockHub_Broadcast_Call) Run(run func(message Message)) *MockHub_Broadcast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Message))
	})
	return _c
}

func (_c *MockHub_Broadcast_Call) Return(_a0 error) *MockHub_Broadcast_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHub_Broadcast_Call) RunAndReturn(run func(Message) error) *MockHub_Broadcast_Call {
	_c.Call.Return(run)
	return _c
}

// OnMessage provides a mock function with given fields: cb
func (_m *MockHub) OnMessage(cb PlayerMessageCallback) {
	_m.Called(cb)
}

// MockHub_OnMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnMessage'
type MockHub_OnMessage_Call struct {
	*mock.Call
}

// OnMessage is a helper method to define mock.On call
//   - cb PlayerMessageCallback
func (_e *MockHub_Expecter) OnMessage(cb interface{}) *MockHub_OnMessage_Call {
	return &MockHub_OnMessage_Call{Call: _e.mock.On("OnMessage", cb)}
}

func (_c *MockHub_OnMessage_Call) Run(run func(cb PlayerMessageCallback)) *MockHub_OnMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(PlayerMessageCallback))
	})
	return _c
}

func (_c *MockHub_OnMessage_Call) Return() *MockHub_OnMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHub_OnMessage_Call) RunAndReturn(run func(PlayerMessageCallback)) *MockHub_OnMessage_Call {
	_c.Call.Return(run)
	return _c
}

// OnNewConnection provides a mock function with given fields: cb
func (_m *MockHub) OnNewConnection(cb NewConnectionCallback) {
	_m.Called(cb)
}

// MockHub_OnNewConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnNewConnection'
type MockHub_OnNewConnection_Call struct {
	*mock.Call
}

// OnNewConnection is a helper method to define mock.On call
//   - cb NewConnectionCallback
func (_e *MockHub_Expecter) OnNewConnection(cb interface{}) *MockHub_OnNewConnection_Call {
	return &MockHub_OnNewConnection_Call{Call: _e.mock.On("OnNewConnection", cb)}
}

func (_c *MockHub_OnNewConnection_Call) Run(run func(cb NewConnectionCallback)) *MockHub_OnNewConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(NewConnectionCallback))
	})
	return _c
}

func (_c *MockHub_OnNewConnection_Call) Return() *MockHub_OnNewConnection_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHub_OnNewConnection_Call) RunAndReturn(run func(NewConnectionCallback)) *MockHub_OnNewConnection_Call {
	_c.Call.Return(run)
	return _c
}

// SendTo provides a mock function with given fields: playerId, message
func (_m *MockHub) SendTo(playerId string, message Message) error {
	ret := _m.Called(playerId, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, Message) error); ok {
		r0 = rf(playerId, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHub_SendTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTo'
type MockHub_SendTo_Call struct {
	*mock.Call
}

// SendTo is a helper method to define mock.On call
//   - playerId string
//   - message Message
func (_e *MockHub_Expecter) SendTo(playerId interface{}, message interface{}) *MockHub_SendTo_Call {
	return &MockHub_SendTo_Call{Call: _e.mock.On("SendTo", playerId, message)}
}

func (_c *MockHub_SendTo_Call) Run(run func(playerId string, message Message)) *MockHub_SendTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(Message))
	})
	return _c
}

func (_c *MockHub_SendTo_Call) Return(_a0 error) *MockHub_SendTo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHub_SendTo_Call) RunAndReturn(run func(string, Message) error) *MockHub_SendTo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHub creates a new instance of MockHub. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHub(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHub {
	mock := &MockHub{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
